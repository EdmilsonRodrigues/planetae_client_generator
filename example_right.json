{
    "openapi": "3.1.0",
    "info": {
        "title": "x3",
        "description": "API for the x3 application (development environment)",
        "version": "1.2.0"
    },
    "paths": {
        "/api/client/admin/persons/": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "List Persons",
                "operationId": "admin-list_persons",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "Create Person",
                "operationId": "admin-create_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person",
                                "description": "The person to create. Do not include id nor _id"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/persons/{person_id}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "Read Person",
                "operationId": "admin-read_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "person_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the person",
                            "title": "Person Id"
                        },
                        "description": "The id of the person"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "Update Person",
                "operationId": "admin-update_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "person_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the person",
                            "title": "Person Id"
                        },
                        "description": "The id of the person"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "Delete Person",
                "operationId": "admin-delete_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "person_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the person",
                            "title": "Person Id"
                        },
                        "description": "The id of the person"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/persons/{person_id}/impersonate": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Persons"
                ],
                "summary": "Impersonate Person",
                "operationId": "admin-impersonate_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "person_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the person",
                            "title": "Person Id"
                        },
                        "description": "The id of the person"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/plans": {
            "get": {
                "tags": [
                    "Admin: Plans"
                ],
                "summary": "List Plans",
                "operationId": "list_plans",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/plan/update": {
            "put": {
                "tags": [
                    "Admin: Plans"
                ],
                "summary": "Update Subscription Plans",
                "operationId": "update_subscription_plans",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSubscriptionData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/admin/subscriptions": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Subscriptions"
                ],
                "summary": "List Subscriptions",
                "operationId": "admin-list_subscriptions",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Subscriptions"
                ],
                "summary": "Create Subscription",
                "operationId": "admin-create_subscription",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/plans": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Plans"
                ],
                "summary": "List Plans",
                "operationId": "admin-list_plans",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/admin/plan/update": {
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Plans"
                ],
                "summary": "Update Subscription Plans",
                "operationId": "admin-update_subscription_plans",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSubscriptionData"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/admin/subscriptions/{subscription_id}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Subscriptions"
                ],
                "summary": "Read Subscription",
                "operationId": "admin-read_subscription",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "subscription_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Subscription Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Subscriptions"
                ],
                "summary": "Update Subscription",
                "description": "Update a subscription in the database.\n\nArgs:\n    subscription_id (str): The ID of the subscription to update.\n    subscription (Subscription): The updated subscription object.\n    token (str): The authentication token.\n\nReturns:\n    Subscription: The updated subscription object.\n\nRaises:\n    HTTPException: If the person is not authorized or if the subscription is not found.",
                "operationId": "admin-update_subscription",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "subscription_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Subscription Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Subscriptions"
                ],
                "summary": "Delete Subscription",
                "description": "Deletes a subscription with the given subscription_id.\n\nArgs:\n    subscription_id (str): The ID of the subscription to be deleted.\n    token (str): The authentication token.\n\nRaises:\n    HTTPException: If the person is not authorized or the subscription is not found.\n\nReturns:\n    ActionJSONResponse: A JSON response indicating the status of the deletion.",
                "operationId": "admin-delete_subscription",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "subscription_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Subscription Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "List Infringements",
                "operationId": "admin-list_infringements",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Create Infringement",
                "operationId": "admin-create_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Infringement",
                                "description": "Infringement object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infringement"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/potential": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Get Potential Va Infringements",
                "description": "Retrieve potential VA infringements from the database.\n\nReturns:\n- list[dict]: A list of potential VA infringements.",
                "operationId": "admin-get_potential_va_infringements",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PotentialVAResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/admin/infringements/{infringement_id}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Read Infringement",
                "operationId": "admin-read_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infringement"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Update Infringement",
                "operationId": "admin-update_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Infringement",
                                "description": "Infringement object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infringement"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Delete Infringement",
                "operationId": "admin-delete_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/{infringement_id}/frames": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Get Infringements Frames",
                "operationId": "admin-get_infringements_frames",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response Admin-Get Infringements Frames"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/{infringement_id}/frames/{frame_path}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Get Infringement Frame",
                "operationId": "admin-get_infringement_frame",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "frame_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The path of the frame",
                            "title": "Frame Path"
                        },
                        "description": "The path of the frame"
                    },
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/{infringement_id}/takedown": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Takedown Infringement",
                "operationId": "admin-takedown_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/{infringement_id}/verify": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Verify Infringement",
                "description": "Verify an infringement.\n\nParameters:\n- db_infringement (dict): The infringement details from the database.\n- verified (bool): The verification status of the infringement.\n\nReturns:\n- ORJSONResponse: The status of the operation.",
                "operationId": "admin-verify_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_admin-verify_infringement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infringements/{infringement_id}/automatic-verify": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Infringements"
                ],
                "summary": "Automatically Verify Infringement",
                "description": "Verify an infringement.",
                "operationId": "admin-automatically_verify_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_admin-automatically_verify_infringement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/infrastructure": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infrastructure"
                ],
                "summary": "List Infrastructure",
                "description": "Retrieve a list of infrastructure servers.\n\nParameters:\n- servers (PaginatedResults): The paginated results.\n\nReturns:\n- JSONResponse: The paginated results",
                "operationId": "admin-list_infrastructure",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/tasks": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infrastructure"
                ],
                "summary": "List Tasks",
                "description": "Retrieve a list of tasks.\n\nParameters:\n- tasks (PaginatedResults): The paginated results of tasks.\n\nReturns:\n- JSONResponse: The paginated results of tasks.",
                "operationId": "admin-list_tasks",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/tasks-pending": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infrastructure"
                ],
                "summary": "List Pending Tasks",
                "description": "Retrieve a list of pending tasks.\n\nParameters:\n- tasks (PaginatedResults): The paginated results of pending tasks.\n\nReturns:\n- JSONResponse: The paginated results of pending tasks.",
                "operationId": "admin-list_pending_tasks",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PendingTasks"
                                    },
                                    "type": "array",
                                    "title": "Response Admin-List Pending Tasks"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/admin/infrastructure/{infrastructure_id}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Infrastructure"
                ],
                "summary": "Read Infrastructure",
                "description": "Retrieve details of a specific infrastructure.\n\nParameters:\n- server (Infrastructure): The infrastructure details.\n\nReturns:\n- Infrastructure: The infrastructure details.",
                "operationId": "admin-read_infrastructure",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infrastructure_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the server",
                            "title": "Infrastructure Id"
                        },
                        "description": "The id of the server"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infrastructure"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Infrastructure"
                ],
                "summary": "Delete Infrastructure",
                "description": "Delete a specific infrastructure.\n\nParameters:\n- deleted_server (dict[str, str]): The result of the deletion operation.\n\nReturns:\n- JSONResponse: The result of the deletion operation with status code 200.",
                "operationId": "admin-delete_infrastructure",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infrastructure_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the server",
                            "title": "Infrastructure Id"
                        },
                        "description": "The id of the server"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "List Contents",
                "description": "Retrieve a list of contents.\n\nParameters:\n- paginated_response (PaginatedResults): The paginated results.\n\nReturns:\n- PaginatedJSONResponse: The paginated results.",
                "operationId": "admin-list_contents",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Create Content",
                "description": "Create a content.\n\nParameters:\n- content (Content): The content to create. Do not include the id.\n\nReturns:\n- JSONResponse: The response.",
                "operationId": "admin-create_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Content",
                                "description": "The content to create. Do not include the id."
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Read Content",
                "description": "Retrieve a content.\n\nParameters:\n- content (Content): The content to retrieve.\n\nReturns:\n- Content: The content.",
                "operationId": "admin-read_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Update Content",
                "operationId": "admin-update_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Content",
                                "description": "The updated content. Do not insert _id nor owner."
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Delete Content",
                "description": "Delete a content.\n\nParameters:\n- deleted_content (dict[str, str]): The content to delete\n\nReturns:\n- ActionJSONResponse: The response",
                "operationId": "admin-delete_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/detection_string": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Add Content Detection Strings",
                "operationId": "admin-add_content_detection_strings",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_admin-add_content_detection_strings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/detection_string/{detectionString}": {
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Delete Content Detection Strings",
                "operationId": "admin-delete_content_detection_strings",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "detectionString",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The detection string",
                            "title": "Detectionstring"
                        },
                        "description": "The detection string"
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/allowed_domain": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Add Content Allowed Domains",
                "operationId": "admin-add_content_allowed_domains",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_admin-add_content_allowed_domains"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/allowed_domain/{allowedDomain}": {
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Delete Content Allowed Domains",
                "operationId": "admin-delete_content_allowed_domains",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "allowedDomain",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The allowed domain",
                            "title": "Alloweddomain"
                        },
                        "description": "The allowed domain"
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/action/{action_type}": {
            "put": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Batch Update Content",
                "description": "Update a list of contents.\n\nParameters:\n- action_type (ActionTypes): The action to perform.\n- content_ids (list[str]): The list of ids of the contents to update.\n\nReturns:\n- dict: The response.",
                "operationId": "admin-batch_update_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "action_type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ActionTypes",
                            "description": "The action to perform"
                        },
                        "description": "The action to perform"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "The list of ids of the contents to update",
                                "title": "Content Ids"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/uploads/{content_id}/{file_name}": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Get Content File",
                "operationId": "admin-get_content_file",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    },
                    {
                        "name": "file_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "File Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/files/{file_name}": {
            "delete": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Delete File",
                "operationId": "admin-delete_file",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "file_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "File Name"
                        }
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/contents/{content_id}/files": {
            "post": {
                "tags": [
                    "Admin",
                    "Admin: Contents"
                ],
                "summary": "Upload Content Files",
                "description": "Upload files to content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- files (List[UploadFile]): The list of files to upload.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the upload.",
                "operationId": "admin-upload_content_files",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_admin-upload_content_files"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/admin/videos/": {
            "get": {
                "tags": [
                    "Admin",
                    "Admin: Videos"
                ],
                "summary": "Get Videos",
                "description": "Get all videos.",
                "operationId": "admin-get_videos",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The id of the task that downloaded the video",
                            "title": "Task Id"
                        },
                        "description": "The id of the task that downloaded the video"
                    },
                    {
                        "name": "url",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The URL of the video",
                            "title": "Url"
                        },
                        "description": "The URL of the video"
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The title of the video",
                            "title": "Title"
                        },
                        "description": "The title of the video"
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The description of the video",
                            "title": "Description"
                        },
                        "description": "The description of the video"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The tags of the video",
                            "title": "Tags"
                        },
                        "description": "The tags of the video"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The duration of the video",
                            "title": "Duration"
                        },
                        "description": "The duration of the video"
                    },
                    {
                        "name": "views",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The number of views of the video",
                            "title": "Views"
                        },
                        "description": "The number of views of the video"
                    },
                    {
                        "name": "likes",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The number of likes of the video",
                            "title": "Likes"
                        },
                        "description": "The number of likes of the video"
                    },
                    {
                        "name": "dislikes",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The number of dislikes of the video",
                            "title": "Dislikes"
                        },
                        "description": "The number of dislikes of the video"
                    },
                    {
                        "name": "favorites",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The number of favorites of the video",
                            "title": "Favorites"
                        },
                        "description": "The number of favorites of the video"
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The rating of the video",
                            "title": "Rating"
                        },
                        "description": "The rating of the video"
                    },
                    {
                        "name": "uploader_url",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The URL of the uploader",
                            "title": "Uploader Url"
                        },
                        "description": "The URL of the uploader"
                    },
                    {
                        "name": "uploader",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The name of the uploader",
                            "title": "Uploader"
                        },
                        "description": "The name of the uploader"
                    },
                    {
                        "name": "uploader_verified",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Whether the uploader is verified",
                            "title": "Uploader Verified"
                        },
                        "description": "Whether the uploader is verified"
                    },
                    {
                        "name": "uploader_producer",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "Whether the uploader is a producer",
                            "title": "Uploader Producer"
                        },
                        "description": "Whether the uploader is a producer"
                    },
                    {
                        "name": "categories",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The categories of the video",
                            "title": "Categories"
                        },
                        "description": "The categories of the video"
                    },
                    {
                        "name": "comments",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The comments of the video",
                            "title": "Comments"
                        },
                        "description": "The comments of the video"
                    },
                    {
                        "name": "num_comments",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The number of comments of the video",
                            "title": "Num Comments"
                        },
                        "description": "The number of comments of the video"
                    },
                    {
                        "name": "video_length",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The length of the video",
                            "title": "Video Length"
                        },
                        "description": "The length of the video"
                    },
                    {
                        "name": "video_file",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The file of the video",
                            "title": "Video File"
                        },
                        "description": "The file of the video"
                    },
                    {
                        "name": "created_at",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The date the video was last updated",
                            "title": "Created At"
                        },
                        "description": "The date the video was last updated"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/": {
            "get": {
                "tags": [
                    "Contents"
                ],
                "summary": "List Content",
                "description": "Retrieve a list of contents.",
                "operationId": "list_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contents"
                ],
                "summary": "Create Content",
                "description": "Create new content.\n\nParameters:\n- content (Content): The content to be created. Do not insert the id nor _id nor owner.\n- session_and_subscription (SessionSubscription): The session and subscription details.\n\nReturns:\n- ORJSONResponse: The created content.",
                "operationId": "create_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentRequest",
                                "description": "The content to be created. Do not insert the id nor _id nor owner"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/byteam/{account_id}": {
            "get": {
                "tags": [
                    "Contents"
                ],
                "summary": "List Content By Accounid",
                "description": "Retrieve a list of contents by account ID.\n\nParameters:\n- paginated_response (PaginatedResults): The paginated results.\n\nReturns:\n- PaginatedJSONResponse: The paginated results.",
                "operationId": "list_content_by_accounId",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The id of the account that owns the content",
                            "title": "Account Id"
                        },
                        "description": "The id of the account that owns the content"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}": {
            "get": {
                "tags": [
                    "Contents"
                ],
                "summary": "Read Content",
                "description": "Retrieve content by its ID.\n\nParameters:\n- content (dict): The content details from the dependency.\n\nReturns:\n- ORJSONResponse: The content details.",
                "operationId": "read_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Contents"
                ],
                "summary": "Update Content",
                "description": "Update content by its ID.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- content (Content): The updated content. Do not insert _id nor owner.\n\nReturns:\n- ORJSONResponse: The updated content.",
                "operationId": "update_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Content",
                                "description": "The updated content. Do not insert _id nor owner."
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contents"
                ],
                "summary": "Delete Content",
                "description": "Delete content by its ID.\n\nParameters:\n- content (dict): The content details from the dependency.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the deletion.",
                "operationId": "delete_content",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/detection_string": {
            "post": {
                "tags": [
                    "Contents"
                ],
                "summary": "Add Content Detection Strings",
                "description": "Add a detection string to content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- detectionString (str): The detection string.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the operation.",
                "operationId": "add_content_detection_strings",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_add_content_detection_strings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/detection_string/{detectionString}": {
            "delete": {
                "tags": [
                    "Contents"
                ],
                "summary": "Delete Content Detection Strings",
                "description": "Delete a detection string from content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- detectionString (str): The detection string.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the operation.",
                "operationId": "delete_content_detection_strings",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "detectionString",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The detection string",
                            "title": "Detectionstring"
                        },
                        "description": "The detection string"
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/allowed_domain": {
            "post": {
                "tags": [
                    "Contents"
                ],
                "summary": "Add Content Allowed Domains",
                "description": "Add an allowed domain to content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- allowedDomain (str): The allowed domain.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the operation.",
                "operationId": "add_content_allowed_domains",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_add_content_allowed_domains"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/allowed_domain/{allowedDomain}": {
            "delete": {
                "tags": [
                    "Contents"
                ],
                "summary": "Delete Content Allowed Domains",
                "description": "Delete an allowed domain from content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- allowedDomain (str): The allowed domain.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the operation.",
                "operationId": "delete_content_allowed_domains",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "allowedDomain",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The allowed domain",
                            "title": "Alloweddomain"
                        },
                        "description": "The allowed domain"
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Content"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/infringement-preferences": {
            "patch": {
                "tags": [
                    "Contents"
                ],
                "summary": "Update Infringement Preferences",
                "description": "Update the infringement preferences of content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- infringement_preferences (dict): The infringement preferences.\n\nReturns:\n- ORJSONResponse: The updated content.",
                "operationId": "update_infringement_preferences",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/fastapi___compat__Body_update_infringement_preferences__1"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/files": {
            "post": {
                "tags": [
                    "Contents"
                ],
                "summary": "Upload Content Files",
                "description": "Upload files to content.\n\nParameters:\n- db_content (dict): The content details from the dependency.\n- files (list[UploadFile]): The list of files to upload.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the upload.",
                "operationId": "upload_content_files",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_content_files"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/uploads/{content_id}/{file_name}": {
            "get": {
                "tags": [
                    "Contents"
                ],
                "summary": "Get Content File",
                "description": "Retrieve a specific file associated with content.\n\nParameters:\n- content_id (str): The ID of the content.\n- file_name (str): The name of the file.\n\nReturns:\n- FileResponse: The requested file.",
                "operationId": "get_content_file",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    },
                    {
                        "name": "file_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "File Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/contents/{content_id}/files/{file_name}": {
            "delete": {
                "tags": [
                    "Contents"
                ],
                "summary": "Delete File",
                "description": "Delete a file associated with content.\n\nParameters:\n- content (dict): The content details from the dependency.\n- file_name (str): The name of the file.\n\nReturns:\n- ORJSONResponse: A response indicating the status of the deletion.",
                "operationId": "delete_file",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "file_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "File Name"
                        }
                    },
                    {
                        "name": "content_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the content",
                            "title": "Content Id"
                        },
                        "description": "The id of the content"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/": {
            "get": {
                "tags": [
                    "Infringements"
                ],
                "summary": "List Infringement",
                "description": "Retrieve a list of infringements.\n\nParameters:\n- paginates_response (PaginatedResults): The paginated results.\n\nReturns:\n- PaginatedJSONResponse: The paginated results.",
                "operationId": "list_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The takedown status filters to apply",
                            "title": "Filters"
                        },
                        "description": "The takedown status filters to apply"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Create Infringement",
                "description": "Create a new infringement.\n\nParameters:\n- infringement (Infringement): The infringement to create. Do not insert the id nor _id nor owner.\n- session_and_subscription (SessionSubscription): The session and subscription details.\n\nReturns:\n- JSONResponse: The created infringement.",
                "operationId": "create_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InfringementRequest",
                                "description": "The infringement to create. Do not insert the id nor _id nor owner"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infringement"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/count": {
            "get": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Get Infringements Count",
                "description": "Retrieve the count of infringements.\n\nParameters:\n- session (Person): The session details.\n\nReturns:\n- ORJSONResponse: The count of infringements.",
                "operationId": "get_infringements_count",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CountInfringements"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/infringements/{infringement_id}": {
            "get": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Read Infringement",
                "description": "Read an infringement by its ID.\n\nParameters:\n- db_infringement (dict): The infringement details from the database.\n\nReturns:\n- ORJSONResponse: The infringement details.",
                "operationId": "read_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Infringement"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/{infringement_id}/whitelist/{level}": {
            "post": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Whitelist Infringement",
                "description": "Whitelist an infringement.\n\nParameters:\n- level (Level): The level to whitelist.\n- db_infringement (dict): The infringement details from the database.\n\nReturns:\n- ORJSONResponse: The status of the operation.",
                "operationId": "whitelist_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "level",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Level",
                            "description": "The level to whitelist"
                        },
                        "description": "The level to whitelist"
                    },
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Unwhitelist Infringement",
                "description": "Unwhitelist an infringement.\n\nParameters:\n- level (Level): The level to unwhitelist.\n- db_infringement (dict): The infringement details from the database.\n\nReturns:\n- ORJSONResponse: The status of the operation.",
                "operationId": "unwhitelist_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "level",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/Level",
                            "description": "The level to unwhitelist"
                        },
                        "description": "The level to unwhitelist"
                    },
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/{infringement_id}/frames": {
            "get": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Get Infringements Frames",
                "operationId": "get_infringements_frames",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "title": "Response Get Infringements Frames"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/{infringement_id}/frames/{frame_path}": {
            "get": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Get Infringement Frame",
                "operationId": "get_infringement_frame",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "frame_path",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The path of the frame",
                            "title": "Frame Path"
                        },
                        "description": "The path of the frame"
                    },
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/{infringement_id}/takedown": {
            "post": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Takedown Infringement",
                "description": "Takedown an infringement.\n\nParameters:\n- db_infringement (dict): The infringement details from the database.\n\nReturns:\n- ORJSONResponse: The status of the operation.",
                "operationId": "takedown_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/infringements/{infringement_id}/verify": {
            "post": {
                "tags": [
                    "Infringements"
                ],
                "summary": "Verify Infringement",
                "description": "Verify an infringement.\n\nParameters:\n- db_infringement (dict): The infringement details from the database.\n- verified (bool): The verification status of the infringement.\n\nReturns:\n- ORJSONResponse: The status of the operation.",
                "operationId": "verify_infringement",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "infringement_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 24,
                            "maxLength": 24,
                            "description": "The id of the infringement",
                            "title": "Infringement Id"
                        },
                        "description": "The id of the infringement"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_verify_infringement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/account_members": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "List Account Member",
                "description": "Retrieve a list of account members.\n\nArgs:\n    request (Request): The incoming request.\n    token (str): The authentication token.\n\nReturns:\n    PaginatedJSONResponse: The paginated JSON response containing the account members.",
                "operationId": "list_account_member",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Create Account Member",
                "description": "Create a new account member.\n\nArgs:\n    account_member (AccountMemberInvite): The account member details.\n    token (str): The authentication token.\n\nRaises:\n    HTTPException: If the user is unauthorized or if there is no subscription.\n    HTTPException: If the user is not a team admin.\n    HTTPException: If the email address is invalid or already in use.\n\nReturns:\n    JSONResponse: The created account member details.",
                "operationId": "create_account_member",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountMemberInvite"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/account_members/{account_member_id}": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Read Account Member",
                "description": "Retrieve information about a specific account member.\n\nParameters:\n- account_member_id (str): The ID of the account member to retrieve.\n- token (str): The authentication token.\n\nReturns:\n- JSONResponse: The account member information in JSON format.\n\nRaises:\n- HTTPException: If the user is unauthorized, the account member is not found, or the user does not have access to the account member.",
                "operationId": "read_account_member",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "account_member_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Account Member Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Account Member",
                "description": "Update an account member with the specified account_member_id.\n\nArgs:\n    account_member_id (str): The ID of the account member to update.\n    account_member (AccountMemberInvite): The updated account member data.\n    token (str, optional): The authentication token. Defaults to Depends(oauth2_scheme).\n\nRaises:\n    HTTPException: If the user is unauthorized or forbidden to access the account member.\n    HTTPException: If the account member is not found.\n\nReturns:\n    None",
                "operationId": "default-update_account_member",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "account_member_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Account Member Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountMemberInvite"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Account"
                ],
                "summary": "Delete Account Member",
                "description": "Delete an account member.\n\nParameters:\n- account_member_id (str): The ID of the account member to delete.\n- token (str): The authentication token.\n\nReturns:\n- JSONResponse: A JSON response indicating the status of the deletion.\n\nRaises:\n- HTTPException: If the user is unauthorized, the account member is not found, or the user does not have access to the account member.",
                "operationId": "delete_account_member",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "account_member_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Account Member Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/auth/sign-in": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign In",
                "description": "Endpoint for user sign-in.\n\nArgs:\n    auth_form (OAuth2PasswordRequestForm): The form containing the username and password\n\nReturns:\n    JSONResponse: A JSON response containing the access token, refresh token, and token type.",
                "operationId": "sign_in",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_sign_in"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/auth/sign-up": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign Up",
                "operationId": "sign_up",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/auth/sign-in-with-token": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Sign In With Token",
                "description": "Endpoint for signing in with a token.",
                "operationId": "sign_in_with_token",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseAuthResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/auth/login-with-outseta": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login With Outseta",
                "description": "Authenticates a user with Outseta token.\n\nArgs:\n    auth_details (Credentials): The authentication details containing the token.\n\nReturns:\n    JSONResponse: A JSON response containing a success message and the authenticated person.",
                "operationId": "login_with_outseta",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Credentials"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutsetaLoginResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/auth/reset-password/{username}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset Password",
                "description": "Resets the password for a given username.\n\nArgs:\n    username (str): The username for which the password needs to be reset.\n\nReturns:\n    JSONResponse: A JSON response indicating whether the password reset email was sent successfully.\n\nRaises:\n    HTTPException: If the username is invalid.",
                "operationId": "reset_password",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Username"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/person/me": {
            "get": {
                "tags": [
                    "Persons"
                ],
                "summary": "Read Persons Me",
                "description": "Retrieve information about the currently authenticated person.\n\nParameters:\n- token (str): The authentication token.\n\nReturns:\n- JSONResponse: The person's information in JSON format.\n\nRaises:\n- HTTPException: If the person is not authenticated (status code 401).",
                "operationId": "read_persons_me",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Persons"
                ],
                "summary": "Update Persons Me",
                "description": "Update the information of the currently authenticated person.\n\nParameters:\n- token (str): The authentication token.\n\nReturns:\n- None",
                "operationId": "update_persons_me",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/person/me/infringement-preferences": {
            "patch": {
                "tags": [
                    "Persons"
                ],
                "summary": "Update Infringement Preferences",
                "description": "Update the infringement preferences of the currently authenticated person.",
                "operationId": "update_infringement_preferences",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/fastapi___compat__Body_update_infringement_preferences__2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/api/client/person/{person_id}": {
            "get": {
                "tags": [
                    "Persons"
                ],
                "summary": "Read Person",
                "operationId": "read_person",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "person_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Person Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/notifications/": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Read Notifications",
                "description": "Retrieve notifications for the currently authenticated person.",
                "operationId": "read_notifications",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/faces/": {
            "get": {
                "tags": [
                    "Faces"
                ],
                "summary": "Read Faces",
                "description": "Retrieve all faces.",
                "operationId": "read_faces",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/faces/unknown": {
            "get": {
                "tags": [
                    "Faces"
                ],
                "summary": "Read Unknown Faces",
                "description": "Retrieve all unknown faces.",
                "operationId": "read_unknown_faces",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page number",
                            "default": 0,
                            "title": "Page"
                        },
                        "description": "The page number"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "The page size",
                            "default": 10,
                            "title": "Size"
                        },
                        "description": "The page size"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort field",
                            "default": "_id",
                            "title": "Sort"
                        },
                        "description": "The sort field"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "The sort order",
                            "default": "asc",
                            "title": "Order"
                        },
                        "description": "The sort order"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "The search term",
                            "default": "",
                            "title": "Search"
                        },
                        "description": "The search term"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedResults"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/faces/{face_id}": {
            "get": {
                "tags": [
                    "Faces"
                ],
                "summary": "Read Face",
                "description": "Retrieve a face.",
                "operationId": "read_face",
                "parameters": [
                    {
                        "name": "face_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Face Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Face"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/client/faces/{face_id}/images": {
            "get": {
                "tags": [
                    "Faces"
                ],
                "summary": "Get Face Image",
                "operationId": "get_face_image",
                "parameters": [
                    {
                        "name": "face_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Face Id"
                        }
                    },
                    {
                        "name": "image",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "maximum": 3,
                            "minimum": 0,
                            "title": "Image"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccountMemberInvite": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "accountId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Accountid"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Subscriptionid"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "firstName": {
                        "type": "string",
                        "title": "Firstname",
                        "default": ""
                    },
                    "lastName": {
                        "type": "string",
                        "title": "Lastname",
                        "default": ""
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoles",
                        "default": "user"
                    },
                    "seats": {
                        "type": "integer",
                        "title": "Seats",
                        "default": 1
                    },
                    "plan_type": {
                        "type": "string",
                        "title": "Plan Type",
                        "default": ""
                    },
                    "accountStageLabel": {
                        "type": "string",
                        "title": "Accountstagelabel",
                        "default": ""
                    },
                    "createdBy": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Createdby"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "subscriptionId",
                    "name",
                    "username",
                    "email",
                    "createdBy"
                ],
                "title": "AccountMemberInvite",
                "description": "    Represents an invitation sent to a user to join an account as a member.\n\n    Attributes:\n        id (PyObjectId): The unique identifier for the invitation.\n        accountId (str, optional): The ID of the account associated with the invitation.\n        subscriptionId (str, optional): The ID of the subscription associated with the invitation.\n        name (str): The name of the invitee.\n        username (str, optional): The username of the invitee.\n        firstName (str): The first name of the invitee.\n        lastName (str): The last name of the invitee.\n        email (str): The email address of the invitee.\n    role (str): The role assigned to the invitee (default: \"member\").\n    createdAt (datetime): The date and time when the invitation was created.\n    createdBy (str, optional): The user who created the invitation.\n    updatedAt (datetime): The date and time when the invitation was last updated.\n\nMethods:\n    is_valid_email: Checks if the email address is valid."
            },
            "ActionModel": {
                "properties": {
                    "action": {
                        "type": "string",
                        "title": "Action"
                    },
                    "message": {
                        "type": "string",
                        "title": "Message"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "detail": {
                        "type": "string",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "message",
                    "status",
                    "detail"
                ],
                "title": "ActionModel"
            },
            "ActionTypes": {
                "type": "string",
                "enum": [
                    "approve",
                    "disapprove"
                ],
                "title": "ActionTypes"
            },
            "AuthResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "refresh_token": {
                        "type": "string",
                        "title": "Refresh Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "default": "bearer"
                    },
                    "person": {
                        "type": "string",
                        "title": "Person"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "refresh_token",
                    "person"
                ],
                "title": "AuthResponse"
            },
            "BaseAuthResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "refresh_token": {
                        "type": "string",
                        "title": "Refresh Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "default": "bearer"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "refresh_token"
                ],
                "title": "BaseAuthResponse"
            },
            "Body_add_content_allowed_domains": {
                "properties": {
                    "allowedDomain": {
                        "type": "string",
                        "title": "Alloweddomain",
                        "description": "The allowed domain"
                    }
                },
                "type": "object",
                "required": [
                    "allowedDomain"
                ],
                "title": "Body_add_content_allowed_domains"
            },
            "Body_add_content_detection_strings": {
                "properties": {
                    "detectionString": {
                        "type": "string",
                        "title": "Detectionstring",
                        "description": "The detection string"
                    }
                },
                "type": "object",
                "required": [
                    "detectionString"
                ],
                "title": "Body_add_content_detection_strings"
            },
            "Body_admin-add_content_allowed_domains": {
                "properties": {
                    "allowedDomain": {
                        "type": "string",
                        "title": "Alloweddomain",
                        "description": "The allowed domain"
                    }
                },
                "type": "object",
                "required": [
                    "allowedDomain"
                ],
                "title": "Body_admin-add_content_allowed_domains"
            },
            "Body_admin-add_content_detection_strings": {
                "properties": {
                    "detectionString": {
                        "type": "string",
                        "title": "Detectionstring",
                        "description": "The detection string"
                    }
                },
                "type": "object",
                "required": [
                    "detectionString"
                ],
                "title": "Body_admin-add_content_detection_strings"
            },
            "Body_admin-automatically_verify_infringement": {
                "properties": {
                    "verify": {
                        "type": "boolean",
                        "title": "Verify"
                    }
                },
                "type": "object",
                "required": [
                    "verify"
                ],
                "title": "Body_admin-automatically_verify_infringement"
            },
            "Body_admin-upload_content_files": {
                "properties": {
                    "files": {
                        "items": {
                            "type": "string",
                            "format": "binary"
                        },
                        "type": "array",
                        "title": "Files"
                    }
                },
                "type": "object",
                "required": [
                    "files"
                ],
                "title": "Body_admin-upload_content_files"
            },
            "Body_admin-verify_infringement": {
                "properties": {
                    "verified": {
                        "type": "boolean",
                        "title": "Verified"
                    }
                },
                "type": "object",
                "required": [
                    "verified"
                ],
                "title": "Body_admin-verify_infringement"
            },
            "Body_sign_in": {
                "properties": {
                    "grant_type": {
                        "anyOf": [
                            {
                                "type": "string",
                                "pattern": "password"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grant Type"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "scope": {
                        "type": "string",
                        "title": "Scope",
                        "default": ""
                    },
                    "client_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Id"
                    },
                    "client_secret": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Secret"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Body_sign_in"
            },
            "Body_upload_content_files": {
                "properties": {
                    "files": {
                        "items": {
                            "type": "string",
                            "format": "binary"
                        },
                        "type": "array",
                        "title": "Files"
                    }
                },
                "type": "object",
                "required": [
                    "files"
                ],
                "title": "Body_upload_content_files"
            },
            "Body_verify_infringement": {
                "properties": {
                    "verified": {
                        "type": "boolean",
                        "title": "Verified"
                    }
                },
                "type": "object",
                "required": [
                    "verified"
                ],
                "title": "Body_verify_infringement"
            },
            "Content": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ContentTypes"
                    },
                    "modelName": {
                        "type": "string",
                        "title": "Modelname"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "urls": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Urls",
                        "default": []
                    },
                    "detectionStrings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Detectionstrings",
                        "default": []
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "face_id": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 24,
                                "minLength": 24
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Face Id"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "default": {}
                    },
                    "owner": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Owner"
                    },
                    "accountId": {
                        "type": "string",
                        "title": "Accountid",
                        "default": ""
                    },
                    "imagePreview": {
                        "type": "string",
                        "title": "Imagepreview",
                        "default": ""
                    },
                    "infringementPreferences": {
                        "$ref": "#/components/schemas/InfringementPreferences",
                        "default": {
                            "createdAt": "2024-11-06T19:42:24.047520Z",
                            "updatedAt": "2024-11-06T19:42:24.047520Z",
                            "receiveEmailOnDetection": false,
                            "automaticApproveInfringements": false,
                            "receiveEmailOnTakedown": false,
                            "sendTakedownRequests": false
                        }
                    },
                    "allowedDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Alloweddomains",
                        "default": []
                    },
                    "files": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Files",
                        "default": []
                    },
                    "is_verified": {
                        "type": "boolean",
                        "title": "Is Verified",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "type",
                    "modelName",
                    "description",
                    "owner"
                ],
                "title": "Content",
                "description": "Represents a piece of content."
            },
            "ContentRequest": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "title": {
                        "type": "string",
                        "title": "Title"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ContentTypes"
                    },
                    "modelName": {
                        "type": "string",
                        "title": "Modelname"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description"
                    },
                    "urls": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Urls",
                        "default": []
                    },
                    "detectionStrings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Detectionstrings",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "type",
                    "modelName",
                    "description"
                ],
                "title": "ContentRequest"
            },
            "ContentTypes": {
                "type": "string",
                "enum": [
                    "image",
                    "video",
                    "audio",
                    "face",
                    "text",
                    "document",
                    "other"
                ],
                "title": "ContentTypes"
            },
            "CountInfringements": {
                "properties": {
                    "potential_infringements": {
                        "type": "integer",
                        "title": "Potential Infringements",
                        "default": 0
                    },
                    "verified_infringements": {
                        "type": "integer",
                        "title": "Verified Infringements",
                        "default": 0
                    },
                    "takedown_pending": {
                        "type": "integer",
                        "title": "Takedown Pending",
                        "default": 0
                    },
                    "takedown_successful": {
                        "type": "integer",
                        "title": "Takedown Successful",
                        "default": 0
                    },
                    "non_infringements": {
                        "type": "integer",
                        "title": "Non Infringements",
                        "default": 0
                    },
                    "total": {
                        "type": "integer",
                        "title": "Total",
                        "default": 0
                    },
                    "unread": {
                        "type": "integer",
                        "title": "Unread",
                        "default": 0
                    }
                },
                "type": "object",
                "title": "CountInfringements"
            },
            "Credentials": {
                "properties": {
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Credentials"
            },
            "DiskComponent": {
                "properties": {
                    "total": {
                        "type": "integer",
                        "title": "Total"
                    },
                    "used": {
                        "type": "integer",
                        "title": "Used"
                    },
                    "free": {
                        "type": "integer",
                        "title": "Free"
                    },
                    "percent": {
                        "type": "number",
                        "title": "Percent"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "used",
                    "free",
                    "percent"
                ],
                "title": "DiskComponent"
            },
            "Face": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "videos": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Videos",
                        "default": []
                    },
                    "verified": {
                        "type": "boolean",
                        "title": "Verified",
                        "default": false
                    },
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "content_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Content Id"
                    },
                    "slug": {
                        "type": "string",
                        "title": "Slug"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ],
                "title": "Face"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "Infrastructure": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "vps": {
                        "type": "string",
                        "title": "Vps"
                    },
                    "ip": {
                        "type": "string",
                        "title": "Ip"
                    },
                    "cpu": {
                        "type": "integer",
                        "title": "Cpu"
                    },
                    "ram": {
                        "$ref": "#/components/schemas/MemoryComponent"
                    },
                    "disk": {
                        "$ref": "#/components/schemas/DiskComponent"
                    },
                    "gpu": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Gpu",
                        "default": []
                    },
                    "components": {
                        "items": {
                            "$ref": "#/components/schemas/InfrastructureComponent"
                        },
                        "type": "array",
                        "title": "Components",
                        "default": []
                    },
                    "last_checkin": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Last Checkin",
                        "default": "2024-11-06T19:42:24.212172Z"
                    }
                },
                "type": "object",
                "required": [
                    "vps",
                    "ip",
                    "cpu",
                    "ram",
                    "disk"
                ],
                "title": "Infrastructure"
            },
            "InfrastructureComponent": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "default": {}
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "name",
                    "status"
                ],
                "title": "InfrastructureComponent"
            },
            "Infringement": {
                "properties": {
                    "contentId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Contentid"
                    },
                    "personId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Personid"
                    },
                    "source": {
                        "type": "string",
                        "title": "Source"
                    },
                    "status": {
                        "$ref": "#/components/schemas/InfringementStatus",
                        "default": "verified"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "details": {
                        "type": "object",
                        "title": "Details",
                        "default": {}
                    },
                    "readAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Readat"
                    },
                    "lastUpdateRead": {
                        "type": "boolean",
                        "title": "Lastupdateread",
                        "default": false
                    },
                    "owner": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Owner"
                    }
                },
                "type": "object",
                "required": [
                    "contentId",
                    "personId",
                    "source",
                    "owner"
                ],
                "title": "Infringement"
            },
            "InfringementPreferences": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "receiveEmailOnDetection": {
                        "type": "boolean",
                        "title": "Receiveemailondetection",
                        "default": false
                    },
                    "automaticApproveInfringements": {
                        "type": "boolean",
                        "title": "Automaticapproveinfringements",
                        "default": false
                    },
                    "receiveEmailOnTakedown": {
                        "type": "boolean",
                        "title": "Receiveemailontakedown",
                        "default": false
                    },
                    "sendTakedownRequests": {
                        "type": "boolean",
                        "title": "Sendtakedownrequests",
                        "default": false
                    }
                },
                "type": "object",
                "title": "InfringementPreferences"
            },
            "InfringementRequest": {
                "properties": {
                    "contentId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Contentid"
                    },
                    "personId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Personid"
                    },
                    "source": {
                        "type": "string",
                        "title": "Source"
                    },
                    "status": {
                        "$ref": "#/components/schemas/InfringementStatus",
                        "default": "verified"
                    }
                },
                "type": "object",
                "required": [
                    "contentId",
                    "personId",
                    "source"
                ],
                "title": "InfringementRequest"
            },
            "InfringementStatus": {
                "type": "string",
                "enum": [
                    "potential-VA",
                    "potential",
                    "verified",
                    "pending",
                    "successful",
                    "non-infringement"
                ],
                "title": "InfringementStatus"
            },
            "Level": {
                "type": "string",
                "enum": [
                    "content",
                    "user"
                ],
                "title": "Level"
            },
            "MemoryComponent": {
                "properties": {
                    "available": {
                        "type": "integer",
                        "title": "Available"
                    },
                    "total": {
                        "type": "integer",
                        "title": "Total"
                    },
                    "used": {
                        "type": "integer",
                        "title": "Used"
                    },
                    "free": {
                        "type": "integer",
                        "title": "Free"
                    },
                    "percent": {
                        "type": "number",
                        "title": "Percent"
                    }
                },
                "type": "object",
                "required": [
                    "available",
                    "total",
                    "used",
                    "free",
                    "percent"
                ],
                "title": "MemoryComponent"
            },
            "NotificationPreferences": {
                "properties": {
                    "receiveNewsletter": {
                        "type": "boolean",
                        "title": "Receivenewsletter",
                        "default": false
                    },
                    "receivePromotions": {
                        "type": "boolean",
                        "title": "Receivepromotions",
                        "default": false
                    }
                },
                "type": "object",
                "title": "NotificationPreferences"
            },
            "OutsetaLoginResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type"
                    },
                    "expires_in": {
                        "type": "integer",
                        "title": "Expires In"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "token_type",
                    "expires_in"
                ],
                "title": "OutsetaLoginResponse"
            },
            "PaginatedResults": {
                "properties": {
                    "pagination": {
                        "type": "object",
                        "title": "Pagination"
                    },
                    "results": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Results"
                    }
                },
                "type": "object",
                "required": [
                    "pagination",
                    "results"
                ],
                "title": "PaginatedResults",
                "description": "Paginated results.\n\nAttributes:\n- pagination (dict): The pagination parameters.\n- results (list[dict]): The results."
            },
            "PendingTasks": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "lastRun": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Lastrun"
                    },
                    "errors": {
                        "type": "integer",
                        "title": "Errors"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type",
                    "lastRun",
                    "errors"
                ],
                "title": "PendingTasks"
            },
            "Person": {
                "properties": {
                    "username": {
                        "type": "string",
                        "title": "Username",
                        "description": "The username of the person."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the person."
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email",
                        "description": "The email of the person."
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRoles",
                        "description": "The role of the person."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "accountId": {
                        "type": "string",
                        "title": "Accountid",
                        "default": ""
                    },
                    "accountStageLabel": {
                        "type": "string",
                        "title": "Accountstagelabel",
                        "default": ""
                    },
                    "automaticVerify": {
                        "type": "boolean",
                        "title": "Automaticverify",
                        "default": false
                    },
                    "subscriptionId": {
                        "type": "string",
                        "title": "Subscriptionid",
                        "default": ""
                    },
                    "personId": {
                        "type": "string",
                        "title": "Personid",
                        "default": ""
                    },
                    "infringementPreferences": {
                        "$ref": "#/components/schemas/InfringementPreferences",
                        "default": {
                            "createdAt": "2024-11-06T19:42:24.085275Z",
                            "updatedAt": "2024-11-06T19:42:24.085275Z",
                            "receiveEmailOnDetection": false,
                            "automaticApproveInfringements": false,
                            "receiveEmailOnTakedown": false,
                            "sendTakedownRequests": false
                        }
                    },
                    "notificationPreferences": {
                        "$ref": "#/components/schemas/NotificationPreferences",
                        "default": {
                            "receiveNewsletter": false,
                            "receivePromotions": false
                        }
                    },
                    "allowedDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Alloweddomains",
                        "default": []
                    },
                    "createdBy": {
                        "type": "string",
                        "title": "Createdby",
                        "default": ""
                    },
                    "owner": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 24,
                                "minLength": 24
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Owner"
                    },
                    "seats": {
                        "type": "integer",
                        "title": "Seats",
                        "default": 1
                    },
                    "plan_type": {
                        "type": "string",
                        "title": "Plan Type",
                        "default": ""
                    },
                    "profileImg": {
                        "type": "string",
                        "title": "Profileimg",
                        "default": ""
                    },
                    "signature": {
                        "type": "string",
                        "title": "Signature",
                        "default": ""
                    },
                    "country": {
                        "type": "string",
                        "title": "Country",
                        "default": ""
                    },
                    "company": {
                        "type": "string",
                        "title": "Company",
                        "default": ""
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "name",
                    "email",
                    "role"
                ],
                "title": "Person"
            },
            "PotentialVAResponse": {
                "properties": {
                    "potential_va": {
                        "type": "integer",
                        "title": "Potential Va"
                    }
                },
                "type": "object",
                "required": [
                    "potential_va"
                ],
                "title": "PotentialVAResponse"
            },
            "Subscription": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Createdat"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Updatedat"
                    },
                    "_id": {
                        "type": "string",
                        "title": " Id",
                        "default": "672bc6a0ea81dbdb436bde92"
                    },
                    "personId": {
                        "type": "string",
                        "maxLength": 24,
                        "minLength": 24,
                        "title": "Personid"
                    },
                    "planId": {
                        "type": "string",
                        "title": "Planid"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Startdate",
                        "default": "2024-11-06T19:42:24.074710Z"
                    },
                    "endDate": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Enddate"
                    },
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "default": ""
                    },
                    "scription_id": {
                        "type": "string",
                        "title": "Scription Id",
                        "default": ""
                    }
                },
                "type": "object",
                "required": [
                    "personId",
                    "planId"
                ],
                "title": "Subscription",
                "description": "Represents a subscription for a person to a specific plan.\n\nAttributes:\n    id (PyObjectId): The unique identifier for the subscription.\n    personId (str): The ID of the person associated with the subscription.\n    planId (str): The ID of the plan associated with the subscription.\n    startDate (datetime): The start date of the subscription.\n    endDate (Optional[datetime]): The end date of the subscription.\n    status (str): The status of the subscription.\n    scription_id (str): The ID of the subscription.\n\nMethods:\n    get_plan(db): Retrieves the plan associated with the subscription from the database.\n    get_plan_id(db): Retrieves the plan associated with the subscription using the plan ID from the database."
            },
            "UpdateSubscriptionData": {
                "properties": {
                    "seats": {
                        "type": "integer",
                        "title": "Seats"
                    },
                    "plan_type": {
                        "type": "string",
                        "title": "Plan Type"
                    }
                },
                "type": "object",
                "required": [
                    "seats",
                    "plan_type"
                ],
                "title": "UpdateSubscriptionData"
            },
            "UserRoles": {
                "type": "string",
                "enum": [
                    "superadmin",
                    "account-admin",
                    "account-manager",
                    "user"
                ],
                "title": "UserRoles"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "fastapi___compat__Body_update_infringement_preferences__1": {
                "properties": {
                    "preferences": {
                        "$ref": "#/components/schemas/InfringementPreferences",
                        "description": "The infringement preferences"
                    }
                },
                "type": "object",
                "required": [
                    "preferences"
                ],
                "title": "Body_update_infringement_preferences"
            },
            "fastapi___compat__Body_update_infringement_preferences__2": {
                "properties": {
                    "preferences": {
                        "$ref": "#/components/schemas/InfringementPreferences"
                    }
                },
                "type": "object",
                "required": [
                    "preferences"
                ],
                "title": "Body_update_infringement_preferences"
            }
        },
        "securitySchemes": {
            "OAuth2PasswordBearer": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "scopes": {},
                        "tokenUrl": "api/client/auth/sign-in"
                    }
                }
            }
        }
    }
}